// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalCarbonRetired", Value.fromBigInt(BigInt.zero()));
    this.set("totalRetirements", Value.fromBigInt(BigInt.zero()));
    this.set("retirements", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCarbonRetired(): BigInt {
    let value = this.get("totalCarbonRetired");
    return value!.toBigInt();
  }

  set totalCarbonRetired(value: BigInt) {
    this.set("totalCarbonRetired", Value.fromBigInt(value));
  }

  get totalRetirements(): BigInt {
    let value = this.get("totalRetirements");
    return value!.toBigInt();
  }

  set totalRetirements(value: BigInt) {
    this.set("totalRetirements", Value.fromBigInt(value));
  }

  get retirements(): Array<string> {
    let value = this.get("retirements");
    return value!.toStringArray();
  }

  set retirements(value: Array<string>) {
    this.set("retirements", Value.fromStringArray(value));
  }
}

export class Retirement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenLabel", Value.fromString(""));
    this.set("retiringAddress", Value.fromBytes(Bytes.empty()));
    this.set("beneficiaryAddress", Value.fromBytes(Bytes.empty()));
    this.set("beneficiaryString", Value.fromString(""));
    this.set("retirementMessage", Value.fromString(""));
    this.set("carbonPool", Value.fromBytes(Bytes.empty()));
    this.set("retiredAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Retirement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Retirement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Retirement", id.toString(), this);
    }
  }

  static load(id: string): Retirement | null {
    return changetype<Retirement | null>(store.get("Retirement", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenLabel(): string {
    let value = this.get("tokenLabel");
    return value!.toString();
  }

  set tokenLabel(value: string) {
    this.set("tokenLabel", Value.fromString(value));
  }

  get retiringAddress(): Bytes {
    let value = this.get("retiringAddress");
    return value!.toBytes();
  }

  set retiringAddress(value: Bytes) {
    this.set("retiringAddress", Value.fromBytes(value));
  }

  get beneficiaryAddress(): Bytes {
    let value = this.get("beneficiaryAddress");
    return value!.toBytes();
  }

  set beneficiaryAddress(value: Bytes) {
    this.set("beneficiaryAddress", Value.fromBytes(value));
  }

  get beneficiaryString(): string {
    let value = this.get("beneficiaryString");
    return value!.toString();
  }

  set beneficiaryString(value: string) {
    this.set("beneficiaryString", Value.fromString(value));
  }

  get retirementMessage(): string {
    let value = this.get("retirementMessage");
    return value!.toString();
  }

  set retirementMessage(value: string) {
    this.set("retirementMessage", Value.fromString(value));
  }

  get carbonPool(): Bytes {
    let value = this.get("carbonPool");
    return value!.toBytes();
  }

  set carbonPool(value: Bytes) {
    this.set("carbonPool", Value.fromBytes(value));
  }

  get carbonToken(): Bytes | null {
    let value = this.get("carbonToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set carbonToken(value: Bytes | null) {
    if (!value) {
      this.unset("carbonToken");
    } else {
      this.set("carbonToken", Value.fromBytes(<Bytes>value));
    }
  }

  get retiredAmount(): BigInt {
    let value = this.get("retiredAmount");
    return value!.toBigInt();
  }

  set retiredAmount(value: BigInt) {
    this.set("retiredAmount", Value.fromBigInt(value));
  }
}
